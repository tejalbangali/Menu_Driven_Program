{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pyttsx3\n",
    "import os\n",
    "\n",
    "while True:\n",
    "    pyttsx3.speak(\"Please Enter Name of The Application you want to open human.\")\n",
    "    name= input(\"Enter Name of The Application to open it :\")\n",
    "\n",
    "    if (\"notepad\" in name) or (\"text editor\" in name):\n",
    "        pyttsx3.speak(\"opening application please wait!\")\n",
    "        os.system(\"notepad\")\n",
    "\n",
    "    elif (\"internet explorer\" in name) or (\"explorer\" in name) or (\"iexplore\" in name):\n",
    "        pyttsx3.speak(\"opening application please wait!\")\n",
    "        os.system(r'\"C:\\Program Files\\Internet Explorer\\iexplore.exe\"')\n",
    "\n",
    "    elif ('media player' in name) or ('music player' in name) or ('wmplayer' in name) or ('player' in name):\n",
    "        pyttsx3.speak(\"opening application please wait!\")\n",
    "        os.system(r'\"C:\\Program Files (x86)\\Windows Media Player\\wmplayer.exe\"')\n",
    "\n",
    "    elif ('browser' in name) or ('chrome' in name) or ('google chrome' in name):\n",
    "        pyttsx3.speak(\"opening application please wait!\")\n",
    "        os.system(r'\"C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe\"')\n",
    "\n",
    "    elif ('firefox' in name) or ('mozilla firefox' in name) :\n",
    "        pyttsx3.speak(\"opening application please wait!\")\n",
    "        os.system(r'\"C:\\Program Files\\Mozilla Firefox\\firefox.exe\" ')\n",
    "\n",
    "    elif ('virtual box' in name):\n",
    "        pyttsx3.speak(\"opening application please wait!\")\n",
    "        os.system(r'\"C:\\Program Files\\Oracle\\VirtualBox\\VirtualBox.exe\"')\n",
    "\n",
    "    elif ('vlc' in name) or ('vlc player' in name) or ('vlc media player' in name):\n",
    "        pyttsx3.speak(\"opening application please wait!\")\n",
    "        os.system(r'\"C:\\Program Files\\VideoLAN\\VLC\\vlc.exe\"')\n",
    "\n",
    "    elif ('winrar' in name):\n",
    "        pyttsx3.speak(\"opening application please wait!\")\n",
    "        os.system(r'\"C:\\Program Files\\WinRAR\\winRAR.exe\"')\n",
    "\n",
    "    elif ('edge' in name) or ('ms edge' in name) or ('microsoft edge' in name) or ('microsoft browser' in name):\n",
    "        pyttsx3.speak(\"opening application please wait!\")\n",
    "        os.system(r'\"C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe\"')\n",
    "\n",
    "    elif ('code blocks' in name):\n",
    "        pyttsx3.speak(\"opening application please wait!\")\n",
    "        os.system(r'\"F:\\CodeBlocks\\codeblocks.exe\"')\n",
    "\n",
    "    elif ('sublime' in name) or ('sublime text editor' in name) or ('sublime editor' in name):\n",
    "        pyttsx3.speak(\"opening application please wait!\")\n",
    "        os.system(r'\"F:\\Sublime Text 3\\Sublime Text 3\\sublime_text.exe\"')\n",
    "\n",
    "    else:\n",
    "        pyttsx3.speak(\"Sorry, Application Not Found! Please try to open any other Application.\")\n",
    "        print('\\nSorry, Application Not Found! Please try to open any other Application.')\n",
    "\n",
    "        pyttsx3.speak('To know the list of Applications you can open, please type \"list\" ')\n",
    "        lists= input(\"\\nTo know the list of Applications you can open, please type 'list'\\n\")\n",
    "\n",
    "        if 'list' in lists:\n",
    "            print(\"\\n1. Notepad \\n2. Internet explorer \\n3. Windows Media Player \\n4. Chrome \\n5. Firefox \\n6. Virtual Box \\n7. VLC Player \\n8. WINRAR \\n9. Microsoft Edge \\n10. Code Blocks \\n11. Sublime Text Editor\")\n",
    "            pyttsx3.speak(\"here is your list! Thanks for Interacting with me Human!\")\n",
    "            pyttsx3.speak(\"You can re-run the code to open applications again\")\n",
    "            break\n",
    "        pyttsx3.speak(\"You didnt typed list! I am ending here. For opening applications again please re-run the code.\")\n",
    "        break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
